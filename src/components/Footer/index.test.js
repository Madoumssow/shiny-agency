// Importation des biblioth√®ques et des composants n√©cessaires pour les tests
import Footer from './' // Importation du composant Footer √† tester
import { render, screen, fireEvent } from '@testing-library/react' // Importation de fonctions de testing-library pour le rendu et les interactions
import { ThemeProvider } from '../../utils/context' // Importation du contexte ThemeProvider pour fournir le th√®me

// D√©but de la suite de tests pour le composant Footer
describe('Footer', () => {
  // Test pour v√©rifier que le composant se rend sans erreurs
  it('Should render without crashing', async () => {
    render(
      <ThemeProvider> {/* Enveloppement du composant Footer avec le ThemeProvider */}
        <Footer /> {/* Rendu du composant Footer */}
      </ThemeProvider>
    )
  })

  // Test pour v√©rifier que le bouton change le th√®me lorsqu'il est cliqu√©
  it('Should change theme', async () => {
    render(
      <ThemeProvider> {/* Enveloppement du composant Footer avec le ThemeProvider */}
        <Footer /> {/* Rendu du composant Footer */}
      </ThemeProvider>
    )
    const nightModeButton = screen.getByRole('button') // R√©cup√©ration du bouton dans le DOM
    expect(nightModeButton.textContent).toBe('Changer de mode : ‚òÄÔ∏è') // V√©rification que le texte initial est correct
    fireEvent.click(nightModeButton) // Simuler un clic sur le bouton
    expect(nightModeButton.textContent).toBe('Changer de mode : üåô') // V√©rification que le texte change apr√®s le clic
  })
})
/******************************************************************************************
 * Explication d√©taill√©e du code :
Imports :

Footer : Importation du composant Footer qui sera test√©.
render, screen, fireEvent : Importation de fonctions de la biblioth√®que @testing-library/react qui facilitent le rendu des composants, l'acc√®s aux √©l√©ments dans le DOM et la simulation d'√©v√©nements utilisateur.
ThemeProvider : Importation du composant ThemeProvider, qui fournit le contexte du th√®me (clair ou sombre) au composant Footer pendant le test.
D√©but de la suite de tests :

describe('Footer', () => {...}) : Cette fonction regroupe plusieurs tests li√©s au composant Footer. Le premier argument est le nom du groupe de tests, et le second est une fonction qui contient les tests.
Premier test : V√©rification du rendu :

it('Should render without crashing', async () => {...}) : Cette fonction d√©finit un test qui v√©rifie si le composant Footer se rend sans provoquer d'erreurs.
render(...) : Le composant Footer est rendu √† l'int√©rieur du ThemeProvider, ce qui lui permet d'acc√©der au contexte du th√®me.
Si le rendu se d√©roule sans probl√®me, le test passe.
Deuxi√®me test : V√©rification du changement de th√®me :

it('Should change theme', async () => {...}) : Ce test v√©rifie que le bouton de changement de th√®me fonctionne correctement.
render(...) : Comme pr√©c√©demment, le composant Footer est rendu √† l'int√©rieur du ThemeProvider.
const nightModeButton = screen.getByRole('button') : R√©cup√®re le bouton √† partir du DOM en utilisant son r√¥le. Cela permet de s'assurer que l'on interagit avec le bon √©l√©ment.
expect(nightModeButton.textContent).toBe('Changer de mode : ‚òÄÔ∏è') : V√©rifie que le texte du bouton est correct avant l'interaction, indiquant que le th√®me actuel est clair.
fireEvent.click(nightModeButton) : Simule un clic sur le bouton.
expect(nightModeButton.textContent).toBe('Changer de mode : üåô') : Apr√®s le clic, v√©rifie que le texte du bouton a chang√©, ce qui indique que le th√®me a √©t√© modifi√© avec succ√®s.
Objectif des tests :
Les tests visent √† s'assurer que le composant Footer se rend correctement et que le bouton permettant de changer le th√®me fonctionne comme pr√©vu. Cela garantit que l'interaction utilisateur est bien g√©r√©e et que l'interface utilisateur r√©agit correctement aux actions de l'utilisateur.
 */