// Importation des biblioth√®ques et des fichiers n√©cessaires
import { useTheme } from '../../utils/hooks' // Importation d'un hook pour g√©rer le th√®me (clair ou sombre)
import styled from 'styled-components' // Importation de styled-components pour le style des composants
import colors from '../../utils/style/colors' // Importation d'un module de couleurs
import EmailInput from '../EmailInput' // Importation du composant EmailInput

// Cr√©ation d'un conteneur stylis√© pour le footer
const FooterContainer = styled.footer`
  display: flex; // Utilisation de Flexbox pour la mise en page
  flex-direction: column; // Les √©l√©ments enfants seront dispos√©s en colonne
  align-items: center; // Centrer les √©l√©ments horizontalement
  justify-content: center; // Centrer les √©l√©ments verticalement
  padding: 60px 0; // Espacement sup√©rieur et inf√©rieur de 60px
`

// Cr√©ation d'un bouton stylis√© pour le mode nuit
const NightModeButton = styled.button`
  background-color: transparent; // Fond transparent pour le bouton
  border: none; // Pas de bordure
  cursor: pointer; // Changement du curseur pour indiquer que le bouton est cliquable
  color: ${colors.secondary}; // Couleur du texte selon la palette de couleurs
  padding-top: 30px; // Espacement sup√©rieur de 30px
`

// D√©finition du composant Footer
function Footer() {
  const { toggleTheme, theme } = useTheme() // Utilisation du hook useTheme pour obtenir la fonction de changement de th√®me et le th√®me actuel

  // Rendu du composant
  return (
    <FooterContainer> {/* Conteneur du footer */}
      <EmailInput theme={theme} /> {/* Inclusion du composant EmailInput avec le th√®me pass√© en prop */}
      <NightModeButton onClick={() => toggleTheme()}> {/* Bouton pour changer le th√®me */}
        Changer de mode : {theme === 'light' ? '‚òÄÔ∏è' : 'üåô'} {/* Texte qui change selon le th√®me actuel */}
      </NightModeButton>
    </FooterContainer>
  )
}

// Exportation du composant pour utilisation dans d'autres fichiers
export default Footer
/********************************************************************************************************
 * Explication d√©taill√©e du code :
Imports :

useTheme : Import√© depuis un hook personnalis√© qui permet de g√©rer l'√©tat du th√®me (clair ou sombre) de l'application.
styled : Import√© depuis styled-components, il permet de cr√©er des composants stylis√©s en utilisant des styles CSS.
colors : Import√© depuis un fichier de style utilitaire, il contient une palette de couleurs √† utiliser dans les styles des composants.
EmailInput : Importation du composant EmailInput, qui est utilis√© pour afficher un champ de saisie d'adresse email.
Styled Components :

FooterContainer : Un composant footer stylis√© qui sert de conteneur pour tout le contenu du pied de page. Il utilise Flexbox pour centrer les √©l√©ments verticalement et horizontalement, avec un espacement vertical de 60px.
NightModeButton : Un bouton stylis√© qui change le th√®me de l'application. Il a un fond transparent, sans bordure, et utilise une couleur secondaire pour le texte. Le curseur change pour indiquer qu'il est cliquable, et il a un espacement sup√©rieur de 30px.
Composant Footer :

D√©finition : La fonction Footer est un composant fonctionnel qui utilise le hook useTheme pour obtenir la fonction toggleTheme (pour changer le th√®me) et le th√®me actuel.
Rendu :
Le composant retourne un FooterContainer qui contient :
Un composant EmailInput, qui re√ßoit le th√®me actuel en tant que prop pour s'assurer qu'il s'affiche correctement selon le th√®me (clair ou sombre).
Un NightModeButton qui appelle la fonction toggleTheme lorsque l'utilisateur clique dessus, ce qui permet de changer le th√®me. Le texte du bouton change dynamiquement pour afficher un soleil (‚òÄÔ∏è) lorsque le th√®me est clair et une lune (üåô) lorsque le th√®me est sombre.
Exportation :

Le composant Footer est export√© pour √™tre utilis√© dans d'autres parties de l'application, comme dans les pages principales ou d'autres composants.
Objectif du composant :
Le composant Footer est con√ßu pour fournir une interface utilisateur simple dans le pied de page de l'application. Il permet √† l'utilisateur de saisir une adresse email (via le composant EmailInput) et de changer le th√®me de l'application. Le design est con√ßu pour √™tre responsive et s'adapte √† la palette de couleurs d√©finie dans l'application.
 */